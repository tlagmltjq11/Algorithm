15649 ~ 15652.cs
난이도가 매우낮은 조건만을 요구했기에, 백트래킹 기법을 복기하기에 좋은 문제들이었다.
하나의 배열로 각 Depth를 체크하므로 재귀가 끝난 후에는 사용했던 배열의 부분을 초기화 해주어야 하는점을
주의해야한다. 

ex)
                        visited[i] = true;
                        arr[cnt] = i;
                        BackTrack(cnt + 1);
                        visited[i] = false; // <--- 초기화 해주어야 다른 경우에서 사용가능.


9663.cs
체스판에 퀸을 배치할때, 각 행마다 하나의 퀸만 배치할 수 있으므로 해당 칸에 퀸을 배치할 수 있는지
검사할때 첫행부터 바로위행까지 배치되어있는 퀸들과 열, 대각선으로 겹치는 부분이 있는지만
검사하면 된다.

처음에 이 아이디어를 떠올리지 못했을때, 2중 포문과 2차원 배열을 사용했는데 
가지치기가 제대로 되지 않았으며 메모리공간이 낭비되었다.

2580.cs 난이도 상
내겐 난이도가 높은 문제여서 꽤 오랜시간이 소요되었던 문제다.
비어있는 공간에 대해서 특정 숫자를 선택했을때 나머지 공간들을 모두 채울 수 있는지
재귀를 이용해서 풀어나가면 되는 문제였다.

ex)

0 3 5 4 6 9 2 7 8
7 8 2 1 0 5 6 0 9
0 6 0 2 7 8 1 3 5
3 2 1 0 4 6 8 9 7
8 0 4 9 1 3 5 0 6
5 9 6 8 2 0 4 1 3
9 1 7 6 5 2 0 8 0
6 0 3 7 0 1 9 5 2
2 5 8 3 9 4 7 6 0

위 상황에서 0, 0 좌표에 대해 1이라는 숫자를 선택했을때
그 다음 0인 2, 5 좌표에 대해 재귀를 호출하고
2, 5 좌표는 3이라는 숫자를 선택했을때, 그 다음 0에 대해 재귀를 호출해가며
스도쿠가 완성될때까지 반복하면 되는 문제. 
(물론 앞의 숫자들로인해 스도쿠가 완성되지 못할 수 있음. -> 재귀가 반환되며 다음 숫자를 고른 경우로 다시 재귀시작★)

이때 각 숫자를 선택할때 같은 행, 같은 열에 대한 조건검사는 쉬웠지만
같은 사각형내의 조건검사부분이 까다로웠다.
특정 좌표가 몇번째 사각형에 포함되어있는지를 좌표값에 대한 사칙연산을 통해서 알아내야 했는데
해당 아이디어를 구상하는데 시간이 좀 소요되었다.

r = 행
c = 열
            r = r / 3; // 0~2 : 0  3~5 : 1  6~8 : 2 값이 나온다는 것을 이용
            c = c / 3; // 0~2 : 0  3~5 : 1  6~8 : 2 값이 나온다는 것을 이용

            //해당 r, c값으로 몇번째 사각형에 속한지 알 수 있게됨.

            //r * 3 -> 0, 3, 6부터 시작하게됨
            //+ 3 을 해줌으로써, 0~2, 3~5, 6~8까지 수행이 가능하게됨.
