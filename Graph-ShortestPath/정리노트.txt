▶ 1753.cs
다익스트라 알고리즘을 복기하는데 좋은 문제였다. 처음에는 시간초과가 떴는데 그 이유는
아직 방문되지않은 최단거리 노드를 찾을때 우선순위 큐를 사용하지 않았기 때문이다.
그리고 대부분 다익트스라 문제는 그래프를 인접리스트로 구현해야 시간초과가 나지 않는것 같다.

▶ 1504.cs  9370.cs
무방향 그래프내에서 최단거리를 구하는데, 특정 정점을 꼭 거쳐가는 경로에 대한 최단거리를 구해야하는 문제이다.
예를들어 n1, n2 정점을 꼭 거쳐야한다면 1 -> n1 -> n2 -> 도착점 혹은 1 -> n2 -> n1 -> 도착점과 같은 경로
혹은 그 이상의 다른 경로또한 두 정점만 거칠 수 있고 최단을 만족한다면 가능하다.
처음 이 문제를 봤을때 1정점부터 n1까지의 최단거리 + n1부터 n2까지의 최단거리 + n2부터 도착점까지의 최단거리를
구해주면 될 것 같았다. 그래서 플로이드 알고리즘을 사용하는것이 더 효율적일까 생각해봤지만, 무슨 이유에서인지
다른사람들의 풀이는 다익스트라를 응용했길래 나또한 다익트스라를 이용해서 푼 문제이다.
위에 설명한 두 경로에대해서 1 -> n1 다익스트라값 + n1 -> n2 다익스트라값  + n2 -> n 다익스트라값을 모두 더한 후
 1 -> n2 다익스트라값 + n2 -> n1 다익스트라값  + n1 -> n 다익스트라값과 최소값을 비교하면 된다.

▶ 11657.cs 
만약 그래프내에 음의 가중치가 존재한다면 어떻게 최단거리를 구할 수 있을까?
다익스트라 알고리즘은 오직 양의 가중치 그래프에서만 작동한다. 이럴때 사용하는 것이 벨만포드 알고리즘이다.
이 문제를 통해 벨만포드의 개념과 c, c# 두 버전의 알고리즘을 모두 작성해보는 계기가 되었다.