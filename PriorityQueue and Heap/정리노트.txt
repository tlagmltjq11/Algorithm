▶ 11279.cs ▶ 1927.cs
우선순위 큐를 Heap 배열 구조로 구현해보는 문제이다. 
최대힙 최소힙 구현을 복기하는데 도움이 많이 됐다.

▶ 11286.cs
우선순위를 비교할때 절대값을 사용하는 최소힙을 만드는 문제이다.
그냥 비교할때 Math.Abs()만 씌워주면 되는 줄 알았는데, 만약 최소의 절대값을 갖는 수가 여럿일 경우
실제 값이 더 작은 것을 출력하도록 해줘야하는 조건이 있었다. 처음에는 힙 내에서 같은 최소의 절대값을 갖는
값들을 모두 탐색해야하나 고민했지만 아무리 생각해봐도 너무 비효율적이라 다른 방법이 있을 것이라 생각했다.
최종 아이디어는 애초에 절대값 힙에 데이터를 삽입할때 말단부터 루트까지 비교해가며 올라가는 과정속에서
비교할 두 수의 절대값이 만약 같다면 실제 값을 비교해서 위치를 변경해주도록 구성해야 한다는 것이다.
데이터 삭제 역시 마찬가지로 말단노드를 루트로 올려 말단까지 내려갈때 위와 같은 방식으로 비교하며 
위치를 옮기도록 해줘야 했다. 구현에 실수가 있어 여러번 실패했지만 로직 자체는 틀리지 않아서 결국
통과를 해낸 문제이다.

▶ 1655.cs ★★
최대힙과 최소힙을 동시에 운영해야 풀 수 있는 문제였다.
처음 아이디어는 우선순위 큐에 데이터를 삽입할 때 현재까지 삽입된 모든 데이터의 합의 평균을 구하고
해당 평균값 즉 중간값과 더 가까운지에 따라 우선순위를 부여해서 힙을 재구성하도록 구현하려 했지만, 
형제노드에 대해서는 처리가되지 않는 문제가 있었다. 고로 다른 아이디어를 구상하다가 블로그를 참고하게 되었다.

두 힙의 사이즈가 같다면 최대힙에 삽입, 다르다면 최소힙에 삽입하며 모든 숫자들을 차례대로 삽입한다.
이때 각 단계마다 최대힙의 루트값이 중간값이 되므로 해당 값을 출력해주면 된다.
만약 최대힙의 루트값이 최소힙의 루트값보다 크다면 둘을 SWAP해주어야 한다.

위처럼 구상하는 이유 : 예를들어 1 2 3 4 라고 할때 중간값은 2,3 중에서 더 작은 2값이 된다.
이를 [1, 2] [3, 4] 와 같이 최대힙 최소힙 순서로 구상한다면 최대힙의 루트값이 정답이되게 된다.

1 -> [1] [ ]	결과 = 1
2 -> [1] [2] 	결과 = 1
3 -> [1, 3] [2]  -> swap -> [1, 2] [3]	결과 = 2
4 -> [1,2] [3, 4] 	결과 = 2

즉 중간값을 빠르게 구하기 위해서는 정렬이 필요하고 중간값보다 작거나 같은값은 최대힙으로 큰값은 최소힙으로 보내며
정렬을 이루어낸 것이다. 정렬은 이미 되었고 갯수도 차례대로 1개씩 넣어주었으니 결과는 항상 최대힙의 루트값이 되게된다.

ps. 평균값을 구하고 평균값에 따라서 작은값을 최대힙 큰값을 최소힙에 넣도록 하는것이 좀더 의미와 목적에 맞는 코드같다.
