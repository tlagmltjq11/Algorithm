▶ 분할정복
정의 : 문제를 나눌 수 없을 때 까지 나누어서 부분 문제를 풀어 다시 합병하여 전체 문제의 답을 얻는 알고리즘.

## 구성 요소
- 문제를 더 작은 문제로 분할 (더 이상 분할 할 수 없고 곧장 풀 수 있는 가장 작은 문제)
- 각 문제에 대해 구한 답을 원래 문제에 대한 답으로 병합

## 특징
- 같은 작업을 둘 이상의 부분 문제로 나누어 계산하기 때문에 병렬적으로 처리 가능하다.
- 둘 이상의 문제로 나눌 자연스러운 방법과 아이디어를 떠올려야 한다.
- 답을 조합해 원래 답을 계산하는 효율적인 방법을 알아야 한다.
- 재귀 많이 사용.

▶ 2630.cs
분할정복에 입문하기 좋은 문제인 것 같다.
같은 숫자로만 이루어진 정사각형들의 집합으로 쪼갠 후, 색깔별로 숫자를 세어야 하는 문제.
같은 숫자로 이루어지지 않았다면, 해당 정사각형을 1,2,3,4사분면으로 분할해야한다.
그 후 새로 생성된 각 정사각형 내에서 또 같은 숫자로 이루어져있는지 판단하며 아닐시, 계속해서 분할해 나가면 된다.
최대 분할은 1개의 숫자로 이루어진 정사각형이다. 만약 같은 숫자로 이루어졌다면 분할을 멈추고 해당 색깔에 맞는
카운트를 1 증가 시켜주면 된다.
가장 주의할 점은 사각형을 쪼갤 때, 사각형의 크기와 가장 맨 처음 원소의 시작 인덱스를 잘 넘겨주는 것이다.★
3사분면 : Divide(n / 2, r + n / 2, c); -> 크기는 1/4만 해지기 때문에 밑변의 길이를 n/2로 주고 행 같은 경우
r을 더해주어야 3사분면의 시작 인덱스값이 나온다.(직접 해보면 앎)

▶ 1992.cs
2630과 별 다를게 없는 문제.

▶ 1780.cs
2630과 유사한 문제지만 9칸으로 나누어야 하기 때문에, 시작 인덱스를 잘 지정해주어야 하는 것이 관건이다.
3의 배수로 이루어진 정사각형이기에 0, 1/3 , 2/3으로 나누어서 생각해주면 된다.

▶ 1629.cs
https://www.youtube.com/watch?v=HQvL9My2Y6o
거듭제곱을 분할정복을 통해서 효율적으로 구하는 문제이다.
거듭제곱을 일반적인 반복문으로 구하게 되면 a^n 을 구한다고 가정할때, n번의 연산이 이루어지게 된다.
이는 수가 커질수록 많은 비용이 들게된다. 이때 거듭제곱의 지수를 줄일 수 있다면, 연산의 횟수가 획기적으로 줄어들 것이다.
그렇게 하기위해 분할정복 기법을 사용한다. ex) 2^4 = 2^2 * 2^2 인 점을 이용하자.
밑수 a와 지수 b가 주어졌을때 a^b = a^b/2 * a^b/2 로 나타내 지수를 줄인 값을 계산함으로써 최종값을 계산하는 것이다.
즉 문제가 지수의 절반짜리 문제들로 점점 분할되는 것이며, 최종적으로 분할된 문제들의 결과값으로 최종값을 계산한다.

※ 주의할 점은 재귀를 통해 지수의 절반짜리 거듭제곱을 구할때 result = 재귀() * 재귀()와 같이 두번의 호출을 하지 않도록
해야한다. 한번의 함수호출을 통해 구해낸 값을 저장해 제곱해 사용해야한다. 

※ 또한 지수가 홀수일 경우를 주의해서 작성해야한다.

ex) 2^100 = 2^50의 제곱 -> 2^25의 제곱 -> 2^12의 제곱 -> 2^6의 제곱 -> 2^3의 제곱 -> 2^1의 제곱 -> 1
연산 100번짜리 문제를 단 7번만에 구해낼 수 있다.

▶ 2740.cs
말그대로 행렬의 곱셈을 직접 구현하는 문제.
오랜만이라 헷갈릴것 같았지만 막상 구현해보니 굉장히 쉬웠다.
2학년때 시험문제에 손코딩으로 나왔었는데.. 그땐 못했던 기억이 떠올랐다.

▶ 10830.cs
2740에서 만들어둔 행렬 곱셈 기능과 1629에서 사용한 거듭제곱을 분할정복으로 풀어나가는 방식을 혼용하면
손쉽게 풀리는 문제였다. 하지만 C#의 문제인지 모든 예제를 통과함에도 불과하고 "틀렸습니다"가 뜨고 있다.
심지어 JAVA 답안을 C#으로 그대로 옮겨 적어서 제출해도 틀렸습니다가 뜨며 JAVA로 제출하면 정답이 뜬다..
