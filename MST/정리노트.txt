▶ 1717.cs
유니온 파인드를 c#으로 구현해보는 문제.
기존 내가 사용하던 Find() 함수를 사용했더니 왜인지 시간초과가 떴다.
오히려 재귀를 이용해야만 통과되었다. -> 난 반복문으로 풀었는데 어째서 더 늦는것인지 다시 풀어봐야겠다.

▶ 9372.cs ★★
가장 적은 종류의 비행기를 사용하겠다는 의미는 -> 간선의 수가 가장 적었으면 좋겠다는 의미이다.
이 말은 결국 신장트리를 만들어내면 된다는 의미이고 신장트리는 DFS, BFS를 통해서 거치게되는 모든 간선을 구하면된다.
하지만 답은 간선의 갯수를 물어보고 있기 때문에 허무하게도 노드의 수 - 1만 해주면 답이 나오게 된다.

▶ 1197.cs ★
유니온-파인드와 크루스칼 알고리즘을 이용해서 최소신장트리를 구해보는 문제이다.

▶ 4386.cs ★★
1197과 마찬가지로 MST를 구하는 문제인데 대신 좌표의 정보만 주고, 간선이나 가중치에 대한 정보는 일절 없었다.
그래서 정점에 대한 정보만 주어졌기에 프림 알고리즘을 사용해야 하나 싶었는데, 좌표의 최대 갯수가 100개 이하여서
직접 모든 좌표들간의 간선을 구한 후 해당 간선들의 리스트에 대해 크루스칼 알고리즘을 적용할 수 있었다.
만약 좌표의 범위가 컸다면, 모든 간선을 구하는 비용이 크기에 무조건 프림을 사용해야 했을 것이다.
<프림은 아직 익숙하지 않으니 연습이 필요하다.>

