백준에 익숙해지다 보니 프로그래머스가 좀 불편하다.. 사용자 입력으로 받는게 오히려 데이터를 다루기 편한 것 같다.

▶ 기능개발.cs
작업량과 작업의 스피드가 주어졌을때 순서상 자신의 앞에 존재하는 모든 작업이 끝나야만 자신의 작업도 처리 되는 상황에서
한번에 처리되는 모든 작업의 수 들을 모든 작업이 끝날때까지 저장하면 되는 문제이다.
문제 자체는 이런저런 설명이 많지만 풀이는 간단하다. 작업량과 작업의 스피드를 이용해 (나누기 연산) 실제 각 작업들이
끝나는데 까지 소요되는 일을 모두 구한다. 해당 day값들을 큐에 순서대로 넣고 큐가 빌때까지 즉 모든 작업이 처리될때 까지
다음을 반복한다.
1. 큐의 맨앞 값을 꺼내 temp에 저장
2. 반복을 돌며 큐의 맨앞에 저장되어 있는 값이 temp 보다 작다면 cnt++  -> 해당 값들은 temp가 처리될때 함께 처리되는 것들
3. 만약 temp 보다 크다면 현재의 cnt값을 answer에 저장 후 temp 값을 큐의 맨앞 값으로 변경 -> 동시에 처리되지 않는 작업
4. 큐가 비게되면 끝.

▶ 다리를 지나는 트럭.cs
먼저 다리에 들어간 트럭이 먼저나오기 점을 고려해 큐를 사용해보는 문제이다.
1. 대기하는 차량이 1대 이상 존재하고, 차가 도로위에 올라갈 수 있다면 도로에 진입시킨다.
2. 대기하는 차량이 있지만 도로에 차가 올라갈 수 없다면 차량이 나갈때까지 시간을 보낸다.
3. 도로에 올라가있는 차량은 시간이 지날수록 남은 거리가 줄어든다.
4. 대기하는 차량이 없어도 도로에 차가있다면 시간을 계속 체크해야 한다.
5. 대기차도 없고 도로에 올라간 차량도 없다면 반복문 종료

알고리즘 자체는 위와같이 심플하게 진행할 수 있다.

하지만 구현에있어서 다리에 올라간 트럭마다 다리를 전부 건넜는지 안건넜는지 판별하기 위해
time을 컨트롤해야하는 점이 꽤 헷갈렸던 문제이다.